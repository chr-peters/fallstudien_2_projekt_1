train <- lapply(providers, function(provider)
provider[
provider["drive_id"] != 8 & provider["drive_id"] != 9 &
provider["drive_id"] != 10, features])
test <- lapply(providers, function(provider)
provider[
provider["drive_id"] == 8 | provider["drive_id"] == 9 |
provider["drive_id"] == 10, features])
numeric_features <- lm_features[as.vector(unlist(lapply(train[[1]][, lm_features],
is.numeric)))]
## ACF und PACF von "throughput_mbits"
throughputs <- list(vodafone = train$vodafone$throughput_mbits,
tmobile = train$tmobile$throughput_mbits,
o2 = train$o2$throughput_mbits)
plot_acf(throughputs, type = "acf",
title = "Autokorrelationsfunktionen der Variable 'throughput_mbits' - Downlink")
for (j in c("vodafone", "o2", "tmobile")){
for (i in numeric_features){
adf.test(train[[j]][,i])$p.value
print(adf.test(train[[j]][,i])$p.value)
}
}
## Skalieren der Daten
for (provider in c("vodafone", "tmobile", "o2")){
scaled <- scale(train[[provider]][, numeric_features])
train[[provider]][, numeric_features] <- scaled
attr(train[[provider]], "scaled:center") <- attr(scaled, "scaled:center")
attr(train[[provider]], "scaled:scale") <- attr(scaled, "scaled:scale")
test[[provider]][, numeric_features] <- scale(test[[provider]][, numeric_features],
center = attr(scaled, "scaled:center"),
scale = attr(scaled, "scaled:scale"))
}
lm_vodafone <- lm(throughput_mbits ~ ., data = train[["vodafone"]][, lm_features])
VIF(lm_vodafone)
lm_tmobile <- lm(throughput_mbits ~ ., data = train[["tmobile"]][, lm_features])
VIF(lm_tmobile)
lm_o2 <- lm(throughput_mbits ~ ., data = train[["o2"]][, lm_features])
VIF(lm_o2)
res_vodafone <- data.frame(res = rstandard(lm_vodafone), provider = "Vodafone")
res_tmobile <- data.frame(res = rstandard(lm_tmobile), provider = "T-Mobile")
res_o2 <- data.frame(res = rstandard(lm_o2), provider = "O2")
res_data <- rbind(res_vodafone, res_tmobile, res_o2)
ggplot(res_data, aes(x = 1:nrow(res_data), y = res)) + geom_point() +
facet_wrap(~provider, scales = "free_x")
plot_data <- list(vodafone = lm_vodafone$residuals,
tmobile = lm_tmobile$residuals,
o2 = lm_o2$residuals)
max_ar <- 7
max_ma <- 7
nrow = (max_ar+1)*(max_ma+1)
grid_vodafone <- matrix(data = c(rep(0:max_ar, each=max_ma+1), rep(0, nrow), rep(0:max_ma, max_ar+1)),
nrow = nrow, ncol = 3)
max_ar <- 2
max_ma <- 10
nrow = (max_ar+1)*(max_ma+1)
grid_o2 <- matrix(data = c(rep(0:max_ar, each=max_ma+1), rep(0, nrow), rep(0:max_ma, max_ar+1)),
nrow = nrow, ncol = 3)
max_ar <- 1
max_ma <- 2
nrow = (max_ar+1)*(max_ma+1)
grid_tmobile <- matrix(data = c(rep(0:max_ar, each=max_ma+1), rep(0, nrow), rep(0:max_ma, max_ar+1)),
nrow = nrow, ncol = 3)
grids <- list("vodafone" = grid_vodafone,
"tmobile" = grid_tmobile,
"o2" = grid_o2)
vodafone_kennzahlen <- list("mse" = data.frame(),
"mae" = data.frame(),
"rsquared" = data.frame(),
"aic" = data.frame())
tmobile_kennzahlen <- list("mse" = data.frame(),
"mae" = data.frame(),
"rsquared" = data.frame(),
"aic" = data.frame())
o2_kennzahlen <- list("mse" = data.frame(),
"mae" = data.frame(),
"rsquared" = data.frame(),
"aic" = data.frame())
kennzahlen <- list("vodafone" = vodafone_kennzahlen,
"tmobile" = tmobile_kennzahlen,
"o2" = o2_kennzahlen,
"aic" = data.frame())
for (provider in c("vodafone", "tmobile", "o2")){
cv_train <- train[[provider]][
train[[provider]]["drive_id"] == 1 | train[[provider]]["drive_id"] == 2,
lm_features
] # erster Trainingsdatensatz - Erweitere diesen dann immer um den Testdatensatz
all_mse <- data.frame(
matrix(rep(NA, 5*nrow(grids[[provider]])), nrow = nrow(grids[[provider]])),
row.names = as.character(1:nrow(grids[[provider]]))
# 5 Spalten (Anzahl Testsets der CV), nrow(grids[[provider]]) Zeilen (Anzahl Kombinationen) Zeilen
)
colnames(all_mse) <- c(paste("test_id", as.character(3:7), sep="_"))
# Spaltennamen: aktuelle Test Id
all_mae <- data.frame(
matrix(rep(NA, 5*nrow(grids[[provider]])), nrow=nrow(grids[[provider]])),
row.names = as.character(1:nrow(grids[[provider]]))
)
colnames(all_mae) <- c(paste("test_id", as.character(3:7), sep="_"))
all_rsquared <- data.frame(
matrix(rep(NA, 5*nrow(grids[[provider]])), nrow=nrow(grids[[provider]])),
row.names = as.character(1:nrow(grids[[provider]]))
)
colnames(all_rsquared) <- c(paste("test_id", as.character(3:7), sep="_"))
all_aic <- data.frame(
matrix(rep(NA, 5*nrow(grids[[provider]])), nrow=nrow(grids[[provider]])),
row.names = as.character(1:nrow(grids[[provider]]))
)
colnames(all_aic) <- c(paste("test_id", as.character(3:7), sep="_"))
for (test_id in 3:7){
if(test_id > 3){
cv_train <- rbind(cv_train,
train[[provider]][
train[[provider]]["drive_id"] == test_id-1, lm_features
])
}
cv_test <- train[[provider]][train[[provider]]["drive_id"] == test_id, lm_features]
for (row in 1:nrow(grids[[provider]])){ # fÃ¼r jede Kombination aus dem Grid
## fit model
y <- ts(cv_train[, "throughput_mbits"]) # konstruiere Zeitreihe
xreg <- cv_train[, lm_features[-which(lm_features == "throughput_mbits")]]
#xreg <- dummy_cols(xreg, remove_first_dummy = TRUE, remove_selected_columns = TRUE)
# Dummy codierung wenn nÃ¶tig
xreg <- data.matrix(xreg)
# konvertiere alle variablen zu numerischen variablen und
# ZusammenfÃ¼hren zu Spalten einer Matrix
arima_fit <- Arima(y = y, order = grids[[provider]][row,], xreg = xreg, method = "ML")
# fitte ein Arima Modell (wobei d = 0)
## predict
y <- ts(cv_test[, "throughput_mbits"])
xreg <- cv_test[, lm_features[-which(lm_features == "throughput_mbits")]]
#xreg <- dummy_cols(xreg, remove_first_dummy = TRUE, remove_selected_columns = TRUE)
xreg <- data.matrix(xreg)
pred <- forecast(arima_fit, xreg = xreg)
#res <- unclass(y) - unclass(pred$mean)
all_mse[row, paste("test_id", test_id, sep = "_")] <- mse(unclass(y), unclass(pred$mean))
all_mae[row, paste("test_id", test_id, sep = "_")] <- mae(unclass(y), unclass(pred$mean))
all_rsquared[row, paste("test_id", test_id, sep = "_")] <- 1 - sum((unclass(pred$mean)-unclass(y))^2)/sum((mean(unclass(y))-unclass(y))^2)
all_aic[row, paste("test_id", test_id, sep = "_")] <- pred$model$aic
# cor(unclass(y), unclass(pred$mean))^2
# yq <- mean(y.test), R2 <- sum((pred.cv-yq)^2)/sum((y.test-yq)^2)
}
kennzahlen[[provider]]$mse <- all_mse
kennzahlen[[provider]]$mae <- all_mae
kennzahlen[[provider]]$rsquared <- all_rsquared
kennzahlen[[provider]]$aic <- all_aic
}
}
grids[["vodafone"]][which.min(rowMeans(kennzahlen$vodafone$mae))[[1]], ]
grids[["vodafone"]][which.min(rowMeans(kennzahlen$vodafone$mse))[[1]], ]
grids[["vodafone"]][which.max(rowMeans(kennzahlen$vodafone$rsquared))[[1]], ]
grids[["vodafone"]][which.min(rowMeans(kennzahlen$vodafone$aic))[[1]], ]
param_vodafone <- grids[["vodafone"]][which.min(rowMeans(kennzahlen$vodafone$mae))[[1]], ]
grids[["tmobile"]][which.min(rowMeans(kennzahlen$tmobile$mae))[[1]], ]
grids[["tmobile"]][which.min(rowMeans(kennzahlen$tmobile$mse))[[1]], ]
grids[["tmobile"]][which.max(rowMeans(kennzahlen$tmobile$rsquared))[[1]], ]
grids[["tmobile"]][which.min(rowMeans(kennzahlen$tmobile$aic))[[1]], ]
param_tmobile <- grids[["tmobile"]][which.min(rowMeans(kennzahlen$tmobile$mae))[[1]], ]
grids[["o2"]][which.min(rowMeans(kennzahlen$o2$mae))[[1]], ]
grids[["o2"]][which.min(rowMeans(kennzahlen$o2$mse))[[1]], ]
grids[["o2"]][which.max(rowMeans(kennzahlen$o2$rsquared))[[1]], ]
grids[["o2"]][which.min(rowMeans(kennzahlen$o2$aic))[[1]], ]
param_o2 <- grids[["o2"]][which.min(rowMeans(kennzahlen$o2$mae))[[1]], ]
parameter <- list("vodafone" = param_vodafone,
"tmobile" = param_tmobile,
"o2" = param_o2)
print(parameter)
kennzahlen_final <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
predictions <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
coeff <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
for (provider in c("tmobile", "o2", "vodafone")){
y <- ts(train[[provider]][, "throughput_mbits"])
xreg <- train[[provider]][, lm_features[-which(lm_features == "throughput_mbits")]]
#xreg <- dummy_cols(xreg, remove_first_dummy = TRUE, remove_selected_columns = TRUE)
xreg <- data.matrix(xreg)
arima_fit <- Arima(y = y, order = parameter[[provider]], xreg = xreg, method = "ML")
coeff[[provider]] <- arima_fit$coef[c("intercept",lm_features[-which(lm_features == "throughput_mbits")])]
# predict
y <- ts(test[[provider]][, "throughput_mbits"])
xreg <- test[[provider]][, lm_features[-which(lm_features == "throughput_mbits")]]
#xreg <- dummy_cols(xreg, remove_first_dummy = TRUE, remove_selected_columns = TRUE)
xreg <- data.matrix(xreg)
predictions[[provider]] <- forecast(arima_fit, xreg = xreg)
predictions[[provider]]$rescaled_forecast <- predictions[[provider]]$mean * attr(train[[provider]], "scaled:scale")["throughput_mbits"] +
attr(train[[provider]], "scaled:center")["throughput_mbits"]
predictions[[provider]]$rescaled_y <- y * attr(train[[provider]], "scaled:scale")["throughput_mbits"] +
attr(train[[provider]], "scaled:center")["throughput_mbits"]
rescaled_y <- unclass(predictions[[provider]]$rescaled_y)
rescaled_forecast <- unclass(predictions[[provider]]$rescaled_forecast)
kennzahlen_final[[provider]]$mse <- mse(rescaled_y, rescaled_forecast)
kennzahlen_final[[provider]]$mae <- mae(rescaled_y, rescaled_forecast)
kennzahlen_final[[provider]]$rsquared <- 1 - sum((rescaled_forecast-rescaled_y)^2)/
sum((mean(rescaled_y)-rescaled_y)^2)
}
provider <- "vodafone"
actual <- data.frame(
value = dl_data[(dl_data["drive_id"] == 8 | dl_data["drive_id"] == 9 | dl_data["drive_id"] == 10) & dl_data["provider"] == provider,
"throughput_mbits"],
type = "actual",
timestamp = anytime(dl_data[(dl_data["drive_id"] == 8 | dl_data["drive_id"] == 9 | dl_data["drive_id"] == 10) & dl_data["provider"] == provider,
"timestamp_ms"]),
drive_id = dl_data[(dl_data["drive_id"] == 8 | dl_data["drive_id"] == 9 | dl_data["drive_id"] == 10) & dl_data["provider"] == provider,
"drive_id"],
scenario = dl_data[(dl_data["drive_id"] == 8 | dl_data["drive_id"] == 9 | dl_data["drive_id"] == 10) & dl_data["provider"] == provider,
"scenario"],
upper = unclass(predictions[[provider]]$upper[,"80%"] * attr(train[[provider]], "scaled:scale")["throughput_mbits"] +
attr(train[[provider]], "scaled:center")["throughput_mbits"]),
lower = unclass(predictions[[provider]]$lower[,"80%"] * attr(train[[provider]], "scaled:scale")["throughput_mbits"] +
attr(train[[provider]], "scaled:center")["throughput_mbits"]))
vorhersage <- data.frame(
value = predictions[[provider]]$rescaled_forecast,
type = "predict",
timestamp = anytime(dl_data[(dl_data["drive_id"]==8 | dl_data["drive_id"] == 9 | dl_data["drive_id"] == 10) & dl_data["provider"] == provider,
"timestamp_ms"]),
drive_id = dl_data[(dl_data["drive_id"]==8 | dl_data["drive_id"] == 9 | dl_data["drive_id"] == 10) & dl_data["provider"] == provider,
"drive_id"],
scenario = dl_data[(dl_data["drive_id"]==8 | dl_data["drive_id"] == 9 | dl_data["drive_id"] == 10) & dl_data["provider"] == provider,
"scenario"],
upper = unclass(predictions[[provider]]$upper[,"80%"])* attr(train[[provider]], "scaled:scale")["throughput_mbits"] +
attr(train[[provider]], "scaled:center")["throughput_mbits"],
lower = unclass(predictions[[provider]]$lower[,"80%"])* attr(train[[provider]], "scaled:scale")["throughput_mbits"] +
attr(train[[provider]], "scaled:center")["throughput_mbits"])
plot_data <- rbind(actual, vorhersage)
name_mapping = list(
"vodafone" = "Vodafone",
"tmobile" = "T-Mobile",
"o2" = "O2"
)
ggplot(
plot_data,
aes(x = timestamp, y = value, color = type)
) +
geom_line(size=1) +
geom_ribbon(aes(ymin = lower, ymax = upper), colour = NA, alpha = 0.2) +
facet_wrap(drive_id~scenario,
scales = "free",
ncol = 4,
labeller = label_wrap_gen(multi_line=FALSE)) +
ggtitle(paste(name_mapping[[provider]], "- Downlink", sep = " ")) +
xlab("Zeit") +
ylab("DatenÃ¼bertragungsrate in MBit/s") +
theme_grey(base_size = 14) +
theme(legend.position="bottom",
legend.title = element_blank()) +
scale_color_hue(labels = c("Beobachtung", "Vorhersage mit 80% KI"))
setwd("~/GitHub/fallstudien_2_projekt_1/prediction_results")
dldata <- read.csv("feature_importance_xgboost_dl.csv", header = TRUE)
for (provider in c("o2", "tmobile", "vodafone")){
dldata[dldata$provider == provider,]$Permutation <- abs(dldata[dldata$provider == provider,]$Permutation)/
sum(abs(dldata[dldata$provider == provider,]$Permutation))
}
coeff$o2[-which(names(coeff$o2) == "intercept")] <- abs(coeff$o2[-which(names(coeff$o2) == "intercept")])/
sum(abs(coeff$o2[-which(names(coeff$o2) == "intercept")]))
coeff$tmobile[-which(names(coeff$tmobile) == "intercept")] <- abs(coeff$tmobile[-which(names(coeff$tmobile) == "intercept")])/
sum(abs(coeff$tmobile[-which(names(coeff$tmobile) == "intercept")]))
coeff$vodafone[-which(names(coeff$vodafone) == "intercept")] <- abs(coeff$vodafone[-which(names(coeff$vodafone) == "intercept")])/
sum(abs(coeff$vodafone[-which(names(coeff$vodafone) == "intercept")]))
df_dl_both <- data.frame(provider = c(rep(c("O2", "T-Mobile", "Vodafone"), each = 9),rep(c("O2", "T-Mobile", "Vodafone"), each = 9)),
features = c(rep(lm_features[-which(lm_features == "throughput_mbits")], 3),
uldata$feature),
value = abs(c(coeff$o2[-which(names(coeff$o2) == "intercept")],
coeff$tmobile[-which(names(coeff$tmobile) == "intercept")],
coeff$vodafon[-which(names(coeff$vodafone) == "intercept")],
uldata$Permutation)),
model = c(rep("ARIMA", 27), rep("XGBoost", 27)))
df_dl_both <- data.frame(provider = c(rep(c("O2", "T-Mobile", "Vodafone"), each = 9),rep(c("O2", "T-Mobile", "Vodafone"), each = 9)),
features = c(rep(lm_features[-which(lm_features == "throughput_mbits")], 3),
dldata$feature),
value = abs(c(coeff$o2[-which(names(coeff$o2) == "intercept")],
coeff$tmobile[-which(names(coeff$tmobile) == "intercept")],
coeff$vodafon[-which(names(coeff$vodafone) == "intercept")],
dldata$Permutation)),
model = c(rep("ARIMA", 27), rep("XGBoost", 27)))
name_mapping = list(
"vodafone" = "Vodafone",
"tmobile" = "T-Mobile",
"o2" = "O2"
)
ggplot(data = df_dl_both, aes(x = features, y = value, fill = provider)) +
geom_bar(stat = "identity" ) +
facet_grid(model ~ provider, labeller = as_labeller(name_mapping)) +
theme_grey(base_size = 18) +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5),
legend.position = "none") +
ggtitle("Feature Importance Modellvergleich - Downlink") +
xlab("Features") +
ylab("Wichtigkeit")
View(dl_data)
View(dldata)
View(coeff)
rm(list = ls())
#--------------------KENNZAHLEN VERGLEICH XGBOOST/ARIMA TASK I----------------------------------------#
setwd("~/GitHub/fallstudien_2_projekt_1/prediction_results")
data_ul <- read.csv("predictions_ul.csv", header=TRUE, sep=",", dec=".")
data_dl <- read.csv("predictions_dl.csv", header=TRUE, sep=",", dec=".")
kennzahlen_ul_xgboost <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
kennzahlen_ul_arima <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
kennzahlen_dl_xgboost <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
kennzahlen_dl_arima <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
for (provider in c("vodafone", "tmobile", "o2")){
subset_ul <- data_ul[data_ul$provider == provider, ]
subset_dl <- data_dl[data_dl$provider == provider, ]
kennzahlen_ul_xgboost[[provider]]$mae <- mae(subset_ul$prediction_xgboost, subset_ul$throughput_mbits)
kennzahlen_ul_xgboost[[provider]]$rsquared <- 1 - sum((subset_ul$prediction_xgboost-subset_ul$throughput_mbits)^2)/
sum((mean(subset_ul$throughput_mbits)-subset_ul$throughput_mbits)^2)
kennzahlen_dl_xgboost[[provider]]$mae <- mae(subset_dl$prediction_xgboost, subset_dl$throughput_mbits)
kennzahlen_dl_xgboost[[provider]]$rsquared <- 1 - sum((subset_dl$prediction_xgboost-subset_dl$throughput_mbits)^2)/
sum((mean(subset_dl$throughput_mbits)-subset_dl$throughput_mbits)^2)
kennzahlen_ul_arima[[provider]]$mae <- mae(subset_ul$prediction_arima, subset_ul$throughput_mbits)
kennzahlen_ul_arima[[provider]]$rsquared <- 1 - sum((subset_ul$prediction_arima-subset_ul$throughput_mbits)^2)/
sum((mean(subset_ul$throughput_mbits)-subset_ul$throughput_mbits)^2)
kennzahlen_dl_arima[[provider]]$mae <- mae(subset_dl$prediction_arima, subset_dl$throughput_mbits)
kennzahlen_dl_arima[[provider]]$rsquared <- 1 - sum((subset_dl$prediction_arima-subset_dl$throughput_mbits)^2)/
sum((mean(subset_dl$throughput_mbits)-subset_dl$throughput_mbits)^2)
}
df_ul <- data.frame(model = rep(c("XGBoost", "ARIMA"), each = 6),
provider = rep(c("Vodafone", "T-Mobile", "O2"), 4),
kennzahl = c(rep(c("MAE", "RÂ²"), each = 3),rep(c("MAE", "RÂ²"), each = 3)),
value = c(kennzahlen_ul_xgboost$vodafone$mae,
kennzahlen_ul_xgboost$tmobile$mae,
kennzahlen_ul_xgboost$o2$mae,
kennzahlen_ul_xgboost$vodafone$rsquared,
kennzahlen_ul_xgboost$tmobile$rsquared,
kennzahlen_ul_xgboost$o2$rsquared,
kennzahlen_ul_arima$vodafone$mae,
kennzahlen_ul_arima$tmobile$mae,
kennzahlen_ul_arima$o2$mae,
kennzahlen_ul_arima$vodafone$rsquared,
kennzahlen_ul_arima$tmobile$rsquared,
kennzahlen_ul_arima$o2$rsquared))
ggplot(data = df_ul, aes(x = model, y = value, fill = model) )+
geom_bar(stat = "identity", position = position_dodge()) +
facet_grid(kennzahl ~ provider, scales = "free_y") +
theme_grey(base_size = 18) +
theme(legend.title = element_blank(),
legend.position = "none") +
ggtitle("Vergleich der Kennzahlen der verschiedenen Modelle - Uplink") +
xlab("Modelle") +
ylab("Wert")
df_dl <- data.frame(model = rep(c("XGBoost", "LM+Arima"), each = 6),
provider = rep(c("Vodafone", "T-Mobile", "O2"), 4),
kennzahl = c(rep(c("MAE", "RÂ²"), each = 3),rep(c("MAE", "RÂ²"), each = 3)),
value = c(kennzahlen_dl_xgboost$vodafone$mae,
kennzahlen_dl_xgboost$tmobile$mae,
kennzahlen_dl_xgboost$o2$mae,
kennzahlen_dl_xgboost$vodafone$rsquared,
kennzahlen_dl_xgboost$tmobile$rsquared,
kennzahlen_dl_xgboost$o2$rsquared,
kennzahlen_dl_arima$vodafone$mae,
kennzahlen_dl_arima$tmobile$mae,
kennzahlen_dl_arima$o2$mae,
kennzahlen_dl_arima$vodafone$rsquared,
kennzahlen_dl_arima$tmobile$rsquared,
kennzahlen_dl_arima$o2$rsquared))
ggplot(data = df_dl, aes(x = model, y = value, fill = model) )+
geom_bar(stat = "identity", position = position_dodge()) +
facet_grid(kennzahl ~ provider, scales = "free_y") +
theme_grey(base_size = 18) +
theme(legend.title = element_blank(),
legend.position = "none") +
ggtitle("Vergleich der Kennzahlen der verschiedenen Modelle - Downlink") +
xlab("Modelle") +
ylab("Wert")
df_dl <- data.frame(model = rep(c("XGBoost", "ARIMA"), each = 6),
provider = rep(c("Vodafone", "T-Mobile", "O2"), 4),
kennzahl = c(rep(c("MAE", "RÂ²"), each = 3),rep(c("MAE", "RÂ²"), each = 3)),
value = c(kennzahlen_dl_xgboost$vodafone$mae,
kennzahlen_dl_xgboost$tmobile$mae,
kennzahlen_dl_xgboost$o2$mae,
kennzahlen_dl_xgboost$vodafone$rsquared,
kennzahlen_dl_xgboost$tmobile$rsquared,
kennzahlen_dl_xgboost$o2$rsquared,
kennzahlen_dl_arima$vodafone$mae,
kennzahlen_dl_arima$tmobile$mae,
kennzahlen_dl_arima$o2$mae,
kennzahlen_dl_arima$vodafone$rsquared,
kennzahlen_dl_arima$tmobile$rsquared,
kennzahlen_dl_arima$o2$rsquared))
ggplot(data = df_dl, aes(x = model, y = value, fill = model) )+
geom_bar(stat = "identity", position = position_dodge()) +
facet_grid(kennzahl ~ provider, scales = "free_y") +
theme_grey(base_size = 18) +
theme(legend.title = element_blank(),
legend.position = "none") +
ggtitle("Vergleich der Kennzahlen der verschiedenen Modelle - Downlink") +
xlab("Modelle") +
ylab("Wert")
kennzahlen_dl_xgboost$o2$rsquared
kennzahlen_dl_arima$tmobile$rsquared
kennzahlen_dl_xgboost$o2$mae
kennzahlen_dl_arima$vodafone$mae
setwd("~/GitHub/fallstudien_2_projekt_1/prediction_results")
data_kenn <- read.csv("predictions_xgboost_linklifetime.csv", header = TRUE)
kennzahlen_ll_xgboost <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
for (provider in c("o2", "tmobile", "vodafone")){
prediction <- data_kenn[data_kenn$provider == provider,"prediction_xgboost"]
link_lt <- data_kenn[data_kenn$provider == provider,"link_lifetime"]
kennzahlen_ll_xgboost[[provider]]$mae <- mae(prediction, link_lt)
kennzahlen_ll_xgboost[[provider]]$rsquared <- 1 - sum((prediction-link_lt)^2)/
sum((mean(link_lt)-link_lt)^2)
}
df <- data.frame(provider = rep(c("vodafone", "tmobile", "o2"), each = 2),
kennzahl = rep(c("MAE", "RÂ²"), 3),
value = c(kennzahlen_ll_xgboost$vodafone$mae,
kennzahlen_ll_xgboost$vodafone$rsquared,
kennzahlen_ll_xgboost$tmobile$mae,
kennzahlen_ll_xgboost$tmobile$rsquared,
kennzahlen_ll_xgboost$o2$mae,
kennzahlen_ll_xgboost$o2$rsquared))
ggplot(data = df, aes(x = kennzahl, y = value, fill = provider)) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~ kennzahl, scales = "free") +
theme_grey(base_size = 18) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_fill_hue(labels = c("O2", "T-Mobile", "Vodafone")) +
ggtitle("Vergleich der Kennzahlen der verschiedenen Provider - Link-Liftime") +
xlab("Kennzahlen") +
ylab("Wert")
setwd("~/GitHub/fallstudien_2_projekt_1/prediction_results")
data <- read.csv("feature_importance_xgboost_linklifetime.csv", header = TRUE)
df_ll <- data.frame(provider = rep(c(" ", "  ", "   "), each = 8),
#features = data$feature[-which(c(data$feature == "enodeb"))],
features = data$feature[-which(c(data$feature == "enodeb"))],
#value = data$Gain[-which(c(data$feature == "enodeb"))])
value = abs(data$Permutation[-which(c(data$feature == "enodeb"))]))
name_mapping = c(
" " = "O2",
"  " = "T-Mobile",
"   " = "Vodafone"
)
ggplot(data = df_ll, aes(x = reorder_within(features, -value, provider, sep = " "), y = value, fill = provider)) +
geom_bar(stat = "identity" ) +
facet_wrap(~ provider, scales = "free", labeller = as_labeller(name_mapping)) +
theme_grey(base_size = 18) +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5),
legend.position = "none") +
ggtitle("Feature Importance der verschiedenen Provider - Link-Lifetime") +
xlab("Features") +
ylab("Koeffizienten")
setwd("~/GitHub/fallstudien_2_projekt_1/prediction_results")
data_kenn <- read.csv("predictions_xgboost_linklifetime.csv", header = TRUE)
kennzahlen_ll_xgboost <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
rm(list = ls())
setwd("~/GitHub/fallstudien_2_projekt_1/prediction_results")
data_kenn <- read.csv("predictions_xgboost_linklifetime.csv", header = TRUE)
kennzahlen_ll_xgboost <- list("vodafone" = list(),
"tmobile" = list(),
"o2" = list())
for (provider in c("o2", "tmobile", "vodafone")){
prediction <- data_kenn[data_kenn$provider == provider,"prediction_xgboost"]
link_lt <- data_kenn[data_kenn$provider == provider,"link_lifetime"]
kennzahlen_ll_xgboost[[provider]]$mae <- mae(prediction, link_lt)
kennzahlen_ll_xgboost[[provider]]$rsquared <- 1 - sum((prediction-link_lt)^2)/
sum((mean(link_lt)-link_lt)^2)
}
df <- data.frame(provider = rep(c("vodafone", "tmobile", "o2"), each = 2),
kennzahl = rep(c("MAE", "RÂ²"), 3),
value = c(kennzahlen_ll_xgboost$vodafone$mae,
kennzahlen_ll_xgboost$vodafone$rsquared,
kennzahlen_ll_xgboost$tmobile$mae,
kennzahlen_ll_xgboost$tmobile$rsquared,
kennzahlen_ll_xgboost$o2$mae,
kennzahlen_ll_xgboost$o2$rsquared))
ggplot(data = df, aes(x = kennzahl, y = value, fill = provider)) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~ kennzahl, scales = "free") +
theme_grey(base_size = 18) +
theme(legend.title = element_blank(),
legend.position = "bottom") +
scale_fill_hue(labels = c("O2", "T-Mobile", "Vodafone")) +
ggtitle("Vergleich der Kennzahlen der verschiedenen Provider - Link-Liftime") +
xlab("Kennzahlen") +
ylab("Wert")
setwd("~/GitHub/fallstudien_2_projekt_1/prediction_results")
data <- read.csv("feature_importance_xgboost_linklifetime.csv", header = TRUE)
df_ll <- data.frame(provider = rep(c(" ", "  ", "   "), each = 8),
#features = data$feature[-which(c(data$feature == "enodeb"))],
features = data$feature[-which(c(data$feature == "enodeb"))],
#value = data$Gain[-which(c(data$feature == "enodeb"))])
value = abs(data$Permutation[-which(c(data$feature == "enodeb"))]))
name_mapping = c(
" " = "O2",
"  " = "T-Mobile",
"   " = "Vodafone"
)
ggplot(data = df_ll, aes(x = reorder_within(features, -value, provider, sep = " "), y = value, fill = provider)) +
geom_bar(stat = "identity" ) +
facet_wrap(~ provider, scales = "free", labeller = as_labeller(name_mapping)) +
theme_grey(base_size = 18) +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0.5),
legend.position = "none") +
ggtitle("Feature Importance der verschiedenen Provider - Link-Lifetime") +
xlab("Features") +
ylab("Koeffizienten")
